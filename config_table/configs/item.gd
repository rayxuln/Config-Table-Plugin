
#===============================================#
#                                               #
#      This file is auto-generated by tool      #
#              2023-04-01 04:55:12              #
#                                               #
#===============================================#

extends ConfigTable

class DataType:
    extends RefCounted
    var id: float
    var name: String
    var attr: Dictionary
    var cost: float

    func _init(field_value_map := {}):
        for key in field_value_map.keys():
            set(key, field_value_map[key])

func _get_data_table():
    # DataType.new({})
    return [
            DataType.new({'id': 1,'name': '钥匙','cost': 10,}),
            DataType.new({'id': 2,'name': '金色斧头','cost': 12,}),
            DataType.new({'id': 3,'name': '银色斧头','cost': 13,}),
            DataType.new({'id': 4,}),
            DataType.new({'id': 5,}),
            DataType.new({'id': 6,}),
            DataType.new({'id': 7,}),
            DataType.new({'id': 8,}),
            DataType.new({'id': 9,}),
            DataType.new({'id': 10,}),
            DataType.new({'id': 11,}),
            DataType.new({'id': 12,}),
            DataType.new({'id': 13,}),
        ]

func by(field_name, v) -> DataType:
    return super._by(field_name, v) as DataType

func _get_data_head_def():
    return [
        "id",
        "name",
        "attr",
        "cost",
    ]

# func by_field1(v) -> DataType:
#   return by("field1", v)
func by_id(v) -> DataType:
    return by("id", v)

func by_name(v) -> DataType:
    return by("name", v)

func by_attr(v) -> DataType:
    return by("attr", v)

func by_cost(v) -> DataType:
    return by("cost", v)

